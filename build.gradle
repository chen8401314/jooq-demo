buildscript {
    ext {
        springBootVersion = '2.2.2.RELEASE'
    }
    repositories {
        mavenLocal()
        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
    }
    dependencies {
        classpath('mysql:mysql-connector-java:8.0.15')
        classpath('org.jooq:jooq-codegen:3.12.3')
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'org.springframework.boot' version '2.2.2.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id "nu.studer.jooq" version "4.1"
    id 'java'
}

dependencies {
    compile 'org.springframework.boot:spring-boot-starter:2.0.0.RELEASE'
    compile 'org.springframework.boot:spring-boot-starter-web:2.0.0.RELEASE'
    compile 'mysql:mysql-connector-java:8.0.11'
    compile 'org.springframework.boot:spring-boot-starter-jooq:2.0.0.RELEASE'
    compile 'org.projectlombok:lombok:1.16.18'
    compile 'com.alibaba:fastjson:1.2.15'
    compile 'com.alibaba:druid:1.1.3'

    compile 'io.springfox:springfox-swagger2:2.6.1'
    compile 'io.springfox:springfox-swagger-ui:2.6.1'
    compile 'org.jooq:jooq-meta:3.12.3'
    compileOnly 'org.jooq:jooq-codegen:3.12.3'


    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    jooqRuntime 'mysql:mysql-connector-java:8.0.11'
    jooqRuntime project(':custom-generator')
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

sourceSets {
    main {
        java {
            srcDirs = ["src/main/java", "build/generated/sources/annotationProcessor/java/main"]
        }
        resources {
            srcDirs = ["src/main/resources"]
        }
    }
}


test {
    useJUnitPlatform()
}

jooq {
    sample(sourceSets.main) {
        jdbc {
            driver = 'com.mysql.cj.jdbc.Driver'
            url = 'jdbc:mysql://localhost:3306/test?serverTimezone=UTC&useUnicode=true&characterEncoding=utf-8&useSSL=false'
            user = 'root'
            password = 'mysqladm'
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            strategy {
                name = 'nu.studer.sample.SampleGeneratorStrategy'  // use the custom generator strategy
            }
            database {
                name = 'org.jooq.meta.mysql.MySQLDatabase'
                inputSchema = 'test'
                includes = '.*'
                excludes = ''
                forcedTypes {
                    forcedType {
                        userType = 'com.example.demo.enumeration.EventStatus'
                        //converter = 'org.jooq.Converter.ofNullable(Integer.class, MyEnum.class, i -> MyEnum.values()[i], MyEnum::ordinal)'
                        enumConverter = true
                        //固定表
                        //includeExpression = "pf_test_t.event_status"
                        includeExpression = ".*\\.event_status"
                        includeTypes = '.*'
                    }
                }
            }
            generate {
                pojos = 'true'
                daos = 'true'
                springAnnotations = 'true'
            }
            target {
                packageName = 'com.example.demo.jooq'
                directory = 'build/generated/sources/annotationProcessor/java/main'
            }
        }
    }
}
tasks.generateSampleJooqSchemaSource.with {
    def out = new ByteArrayOutputStream()
    javaExecSpec = { JavaExecSpec s ->
        s.standardOutput = out
        s.errorOutput = out
        s.ignoreExitValue = true
        s.jvmArgs '-Xmx512M'
    }
    execResultHandler = { ExecResult r ->
        if (r.exitValue != 0) {
            throw new RuntimeException('jOOQ source code generation failed:\n\n' + out.toString())
        }
    }
}

