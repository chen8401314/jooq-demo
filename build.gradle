buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://maven.aliyun.com/repository/public/' }
        maven { url 'https://maven.aliyun.com/repository/spring/' }
        maven { url 'https://maven.aliyun.com/repository/central/' }
        maven { url 'https://maven.aliyun.com/repository/google/' }
        maven { url 'https://maven.aliyun.com/repository/gradle-plugin/' }
        maven { url 'https://maven.aliyun.com/repository/spring-plugin/' }
    }
}


plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id "nu.studer.jooq" version '8.1'
    id 'java'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven { url 'https://maven.aliyun.com/repository/public/' }
    maven { url 'https://maven.aliyun.com/repository/spring/' }
    maven { url 'https://maven.aliyun.com/repository/central/' }
    maven { url 'https://maven.aliyun.com/repository/google/' }
    maven { url 'https://maven.aliyun.com/repository/gradle-plugin/' }
    maven { url 'https://maven.aliyun.com/repository/spring-plugin/' }
}


dependencies {
    implementation "org.springframework.boot:spring-boot-starter:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-web:${springBootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
    //implementation "org.jooq:jooq:${jooqVersion}"
    implementation ("org.springframework.boot:spring-boot-starter-jooq:${springBootVersion}")


//    implementation "org.springframework:spring-tx:${springVersion}"
//    implementation "org.springframework:spring-context:${springVersion}"
//    implementation "org.springframework:spring-jdbc:${springVersion}"

    //implementation "org.springframework.data:spring-data-commons:${springBootVersion}"

    implementation 'mysql:mysql-connector-java:8.0.11'
    implementation "org.projectlombok:lombok:${lombokVersion}"
    implementation 'com.alibaba:druid:1.1.3'


    implementation "org.apache.commons:commons-collections4:${commonsCollections4Version}"

    implementation("io.springfox:springfox-swagger2:${swaggerVersion}") {
        exclude group: "com.google.guava", module: "guava"
        exclude group: "org.slf4j", module: "slf4j-api"
        exclude group: "com.fasterxml.jackson.core"
    }
    implementation "io.springfox:springfox-swagger-ui:${swaggerVersion}"
    implementation "com.github.xiaoymin:swagger-bootstrap-ui:${swaggerUiVersion}"



    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'org.apache.logging.log4j:log4j-to-slf4j:2.10.0'
    implementation 'org.slf4j:jul-to-slf4j:1.7.25'
    implementation "org.apache.commons:commons-lang3:${commonsLang3Version}"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    compileOnly "org.mapstruct:mapstruct:${mapStructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapStructVersion}"
    //compileOnly "org.jooq:jooq-codegen:${jooqVersion}"


    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation("org.springframework.boot:spring-boot-starter-test:${springBootVersion}") {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    jooqGenerator "org.jooq:jooq-meta-extensions:${jooqVersion}"
    jooqGenerator project(':custom-generator')
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}


sourceSets {
    main {
        java {
            srcDirs = ["src/main/java", "build/generated/sources/annotationProcessor/java/main"]
        }
        resources {
            srcDirs = ["src/main/resources"]
        }
    }
}

test {
    useJUnitPlatform()
}

jooq {
    configurations {
        main {
            generationTool {
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    strategy {
                        name = 'nu.studer.sample.SampleGeneratorStrategy'  // use the custom generator strategy
                    }
                    database {
                        name = 'org.jooq.meta.extensions.ddl.DDLDatabase'
                        includes = '.*'
                        excludes = ''
                        properties {
                            property {
                                key = 'scripts'
                                value = 'sql/database.sql'
                            }
                            property {
                                key = 'sort'
                                value = 'semantic'
                            }
                            property {
                                key = 'unqualifiedSchema'
                                value = 'none'
                            }
                            property {
                                key = 'defaultNameCase'
                                value = 'as_is'
                            }
                        }
                        forcedTypes {
                            forcedType {
                                userType = 'com.example.demo.enumeration.EventStatus'
                                //converter = 'org.jooq.Converter.ofNullable(Integer.class, MyEnum.class, i -> MyEnum.values()[i], MyEnum::ordinal)'
                                enumConverter = true
                                //固定表
                                //includeExpression = "pf_test_t.event_status"
                                includeExpression = ".*\\.event_status"
                                includeTypes = '.*'
                            }
                        }
                    }
                    generate {
                        pojos = true
                        daos = true
                        springAnnotations = true
                        springDao = true
                        javaTimeTypes = true
                    }
                    target {
                        packageName = 'com.example.demo.jooq'
                        directory = 'build/generated/sources/annotationProcessor/java/main'
                    }
                }
            }
        }
    }
}
tasks.named('generateJooq').configure {
    def out = new ByteArrayOutputStream()
    javaExecSpec = { JavaExecSpec s ->
        s.standardOutput = out
        s.errorOutput = out
        s.ignoreExitValue = true
        s.jvmArgs '-Xmx512M'
    }
}


